type Artist {
  events(after: String, before: String, first: Int, last: Int): ArtistEventsConnection!
  genres: [String!]!
  id: ID!
  image: String!
  name: String!
  spotifyID: String!
}

type ArtistEventsConnection {
  edges: [ArtistEventsConnectionEdge]!
  pageInfo: PageInfo!
}

type ArtistEventsConnectionEdge {
  cursor: String!
  node: EventArtist!
}

input ArtistsAutocompleteInput {
  name: String!
}

interface BaseError {
  message: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

type ErrorForbidden implements BaseError {
  message: String!
}

type ErrorInvalidRequest implements BaseError {
  message: String!
}

type ErrorNotFound implements BaseError {
  message: String!
}

type ErrorUniqueConstraint implements BaseError {
  message: String!
}

type Event {
  artists(after: String, before: String, first: Int, last: Int, where: EventArtistListFilter): EventArtistsConnection!
  date: DateTime!
  id: ID!
  name: String!
  venue: Venue!
}

type EventArtist {
  artist: Artist!
  event: Event!
  id: ID!
}

input EventArtistFilter {
  id: IntFilter
}

input EventArtistListFilter {
  every: EventArtistFilter
  none: EventArtistFilter
  some: EventArtistFilter
}

type EventArtistsConnection {
  edges: [EventArtistsConnectionEdge]!
  pageInfo: PageInfo!
}

type EventArtistsConnectionEdge {
  cursor: String!
  node: EventArtist!
}

input EventFilter {
  date: DateTimeFilter
  id: IntFilter
  name: StringFilter
  venue: VenueFilter
}

input EventListFilter {
  every: EventFilter
  none: EventFilter
  some: EventFilter
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

input IntFilter {
  equals: Int
  in: [Int!]
  not: IntFilter
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createArtist(spotifyID: String!): MutationCreateArtistResult!
  signUp(avatar: String!, email: String!, name: String!): User!
}

union MutationCreateArtistResult = ErrorInvalidRequest | ErrorNotFound | ErrorUniqueConstraint | MutationCreateArtistSuccess

type MutationCreateArtistSuccess {
  data: Artist!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  artist(input: QueryArtistInput!): Artist
  artistAutocomplete(after: String, before: String, first: Int, input: ArtistsAutocompleteInput!, last: Int): QueryArtistAutocompleteConnection!
  artists(after: String, before: String, first: Int, last: Int): QueryArtistsConnection!
  events(after: String, before: String, first: Int, last: Int): QueryEventsConnection!
  me: User
  user(userId: Int!): User!
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
  venueAutocomplete(after: String, before: String, first: Int, input: VenueAutocompleteInput!, last: Int): QueryVenueAutocompleteConnection!
  venues(after: String, before: String, first: Int, last: Int): QueryVenuesConnection!
}

type QueryArtistAutocompleteConnection {
  edges: [QueryArtistAutocompleteConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryArtistAutocompleteConnectionEdge {
  cursor: String!
  node: SpotifyArtist!
}

input QueryArtistInput {
  id: Int!
}

type QueryArtistsConnection {
  edges: [QueryArtistsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryArtistsConnectionEdge {
  cursor: String!
  node: Artist!
}

type QueryEventsConnection {
  edges: [QueryEventsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryEventsConnectionEdge {
  cursor: String!
  node: Event!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type QueryVenueAutocompleteConnection {
  edges: [QueryVenueAutocompleteConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryVenueAutocompleteConnectionEdge {
  cursor: String!
  node: VenueAutocompleteResult!
}

type QueryVenuesConnection {
  edges: [QueryVenuesConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryVenuesConnectionEdge {
  cursor: String!
  node: Venue!
}

type SpotifyArtist {
  id: String!
  name: String!
}

input StringFilter {
  contains: String
  equals: String
  not: StringFilter
  startsWith: String
}

type User {
  email: String!
  events(after: String, before: String, first: Int, last: Int): UserEventsConnection!
  firstName: String!
  id: ID!
  lastName: String!
}

type UserEvent {
  event: Event!
  id: ID!
  user: User!
}

input UserEventFilter {
  event: EventFilter
  id: IntFilter
}

input UserEventListFilter {
  every: UserEventFilter
  none: UserEventFilter
  some: UserEventFilter
}

type UserEventsConnection {
  edges: [UserEventsConnectionEdge]!
  pageInfo: PageInfo!
}

type UserEventsConnectionEdge {
  cursor: String!
  node: UserEvent!
}

input UserFilter {
  email: StringFilter
  events: UserEventListFilter
  id: IntFilter
  name: StringFilter
}

type Venue {
  address1: String!
  address2: String!
  city: String!
  events(after: String, before: String, first: Int, last: Int): VenueEventsConnection!
  googlePlacesID: String!
  id: ID!
  lat: Float!
  long: Float!
  name: String!
  state: String!
  zip: String!
}

input VenueAutocompleteInput {
  name: String!
}

type VenueAutocompleteResult {
  addressString: String!
  id: String!
  name: String!
}

type VenueEventsConnection {
  edges: [VenueEventsConnectionEdge]!
  pageInfo: PageInfo!
}

type VenueEventsConnectionEdge {
  cursor: String!
  node: Event!
}

input VenueFilter {
  address1: StringFilter
  address2: StringFilter
  city: StringFilter
  googlePlacesID: StringFilter
  id: IntFilter
  name: StringFilter
  state: StringFilter
  zip: StringFilter
}

input VenueListFilter {
  every: VenueFilter
  none: VenueFilter
  some: VenueFilter
}