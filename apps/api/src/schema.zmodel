generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider    = "prisma-pothos-types"
  // Enable prismaUtils feature
  prismaUtils = true
}

datasource db {
  // sqlite is a very limited database, only used for demostration purposes
  provider = "sqlite"
  url      = "file:./dev.db"
}

// model User {
//   id Int @id
//   email String @unique
//   orgs Organization[]

//   // everyone can sign up
//   @@allow('create', true)

//   // can be read by users sharing an organization
//   @@allow('read', orgs?[members?[auth() == this]])

//   // full access by oneself
//   @@allow('all', auth() == this)
// }


// model Organization {
//   id Int @id
//   name String
//   members User[]

//   // login users can create an org
//   @@allow('create', auth() != null)

//   // members can read the org
//   @@allow('read', members?[auth() == this])
// }

// abstract model Base {
//   id Int @id
//   isPublic Boolean @default(false)
//   owner User @relation(fields: [ownerId], references: [id])
//   ownerId Int
//   org Organization @relation(fields: [orgId], references: [id])
//   orgId Int

//   // create: owner must be set to the current user, and the user must be in the org
//   @@allow('create', owner == auth() && org.members?[this == auth()])

//   // update: only the owner can update and is not allowed to change the owner
//   @@allow('update', owner == auth() && org.members?[this == auth()] && future().owner == owner)

//   // allow owner to read and delete
//   @@allow('read,delete', owner == auth())

//   // allow org members to read if public
//   @@allow('read', isPublic && org.members?[this == auth()])
// }

abstract model Base {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()


  // author has full access
  @@allow('all', auth() != null)
}


model User {
  id Int @id @default(autoincrement())
  firstName String @default("")
  lastName String @default("")
  email String @unique @default("")
  authId String @unique @default("")
  events UserEvent[] @relation("UserEvent_user")

  // everyone can sign up
  @@allow('create', true)

  // can be read by users sharing an organization
  // @@allow('read', orgs?[members?[auth() == this]])

  // full access by oneself
  @@allow('all', auth() == this)
}

model Artist extends Base {
  name String @unique @default("")
  spotifyID String @unique @default("")
  events EventArtist[]
}

model Venue extends Base {
  name String @default("")
  address1 String @default("")
  address2 String @default("")
  city String @default("")
  state String @default("")
  zip String @default("")
  lat Float @unique
  long Float @unique
  googlePlacesID String @unique @default("")
  events Event[] @relation("Event_venue")
}

model Event extends Base {
  name String @unique @default("")
  date DateTime
  artists EventArtist[]
  venue Venue @relation("Event_venue", fields: [venueId], references: [id])
  venueId Int @map("venue")
  userEvents UserEvent[] @relation("UserEvent_event")

  @@index([venueId])
}

model EventArtist extends Base {
  event Event @relation(fields: [eventId], references: [id])
  eventId Int
  artist Artist @relation(fields: [artistId], references: [id])
  artistId Int
}

model UserEvent extends Base {
  user User? @relation("UserEvent_user", fields: [userId], references: [id])
  userId Int? @map("user")
  event Event? @relation("UserEvent_event", fields: [eventId], references: [id])
  eventId Int? @map("event")
  notes String @default("")

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}
